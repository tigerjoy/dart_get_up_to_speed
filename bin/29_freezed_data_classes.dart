import 'package:freezed_annotation/freezed_annotation.dart';

// We mark this file to be a part file
// This will be generated by the build_runner
// freezed.
part '29_freezed_data_classes.freezed.dart';

void main(List<String> args) {
  // This invokes the factory constructor
  // Person, which inturn creates an object
  // of _Person, since that is the constructor
  // to which the factory constructor has been
  // redirected to.
  final person = Person(name: 'Ranajoy', age: 13);
  final personAgeUpdated = person.copyWith(age: person.age + 1);
}

// We add a dev dependency called freezed and
// build_runner (for code generation)
// We add a normal dependency called
// freezed_annotation.

// Every freezed data class, we have to
// specify a mixin that will be generated
// by the build_runner. This mixin contains
// all the helpful methods, also in this way
// the existing class is not made dirty, while
// retaining all the features.
@freezed
abstract class Person with _$Person {
  // Added private empty constructor.
  // Must not have any parameter
  const Person._();

  // We are redirecting the factory constructor
  // to invoke another constructor called
  // _Person (provided by freezed). So, that we
  // can create objects of this abstract class
  // which is not allowed, but it is possible here
  // because of this factory Constructor, which
  // inturn invokes the constructor of _Person
  // the generated code that implements this
  // abstract class.
  const factory Person({required String name, required int age}) = _Person;
}

// To generate the data class utilities we run
// dart run build_runner build --delete-conflicting-outputs
